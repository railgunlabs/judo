.TH "JUDO" "3" "Mar 2nd 2025" "Judo 1.0.0-rc2"
.SH NAME
judo_scan \- incrementally scan JSON
.SH LIBRARY
Embeddable JSON parser (libjudo, -ljudo)
.SH SYNOPSIS
.nf
.B #include <judo.h>
.PP
.BI "enum judo_result judo_scan(struct judo_stream *" stream ", const char *" source ", int32_t " length ");"
.fi
.SH DESCRIPTION
The \f[B]judo_scan\f[R](3) function reads \f[C]string\f[R] as JSON and populates \f[I]stream\f[R] with the current token.
The number of code units in \f[C]string\f[R] is specified by \f[I]length\f[R], which, if negative, indicates that \f[C]string\f[R] is null-terminated.
.PP
The caller must zero initialize \f[I]stream\f[R] before the first call to this function.
The implementation will update \f[I]stream\f[R] as \f[C]string\f[R] is scanned.
The caller must never modify \f[I]stream\f[R] otherwise the behavior is undefined.
.PP
The caller may copy \f[I]stream\f[R] with \f[B]memcpy\f[R](3) to preserve its state.
.SH RETURN VALUE
.TP
JUDO_RESULT_SUCCESS
If \f[C]string\f[R] was scanned successfully.
.TP
JUDO_RESULT_BAD_SYNTAX
If \f[C]string\f[R] is malformed JSON.
.TP
JUDO_RESULT_ILLEGAL_BYTE_SEQUENCE
If \f[C]string\f[R] has a malformed UTF-8 encoded character.
.TP
JUDO_RESULT_INVALID_OPERATION
If \f[I]stream\f[R] or \f[C]string\f[R] are NULL.
.TP
JUDO_RESULT_MAXIMUM_NESTING
If \f[C]string\f[R] defines JSON with compound structures nested deeper than \f[B]JUDO_MAXDEPTH\f[R](3).
.TP
JUDO_RESULT_MALFUNCTION
If there is a defect in the implementation.
.SH SEE ALSO
.BR JUDO_MAXDEPTH (3),
.BR judo_stream (3)
.SH AUTHOR
.UR https://railgunlabs.com
Railgun Labs
.UE .
.SH INTERNET RESOURCES
The online documentation is
.UR https://railgunlabs.com/judo
published here
.UE .
.SH LICENSING
Judo is Free Software distributed under the GNU General Public License version 3 as published by the Free Software Foundation.
Alternatively, you can license the library under a proprietary license, as set out on the
.UR https://railgunlabs.com/judo/license/
Railgun Labs website
.UE .